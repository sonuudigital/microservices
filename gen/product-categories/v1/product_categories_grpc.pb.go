// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v6.32.1
// source: product-categories/v1/product_categories.proto

package product_categoriesv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ProductCategoriesService_GetProductCategories_FullMethodName  = "/product_categories.v1.ProductCategoriesService/GetProductCategories"
	ProductCategoriesService_CreateProductCategory_FullMethodName = "/product_categories.v1.ProductCategoriesService/CreateProductCategory"
	ProductCategoriesService_UpdateProductCategory_FullMethodName = "/product_categories.v1.ProductCategoriesService/UpdateProductCategory"
	ProductCategoriesService_DeleteProductCategory_FullMethodName = "/product_categories.v1.ProductCategoriesService/DeleteProductCategory"
)

// ProductCategoriesServiceClient is the client API for ProductCategoriesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductCategoriesServiceClient interface {
	GetProductCategories(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ProductCategory, error)
	CreateProductCategory(ctx context.Context, in *CreateProductCategoryRequest, opts ...grpc.CallOption) (*ProductCategory, error)
	UpdateProductCategory(ctx context.Context, in *UpdateProductCategoryRequest, opts ...grpc.CallOption) (*ProductCategory, error)
	DeleteProductCategory(ctx context.Context, in *DeleteProductCategoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type productCategoriesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductCategoriesServiceClient(cc grpc.ClientConnInterface) ProductCategoriesServiceClient {
	return &productCategoriesServiceClient{cc}
}

func (c *productCategoriesServiceClient) GetProductCategories(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ProductCategory, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductCategory)
	err := c.cc.Invoke(ctx, ProductCategoriesService_GetProductCategories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCategoriesServiceClient) CreateProductCategory(ctx context.Context, in *CreateProductCategoryRequest, opts ...grpc.CallOption) (*ProductCategory, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductCategory)
	err := c.cc.Invoke(ctx, ProductCategoriesService_CreateProductCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCategoriesServiceClient) UpdateProductCategory(ctx context.Context, in *UpdateProductCategoryRequest, opts ...grpc.CallOption) (*ProductCategory, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductCategory)
	err := c.cc.Invoke(ctx, ProductCategoriesService_UpdateProductCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCategoriesServiceClient) DeleteProductCategory(ctx context.Context, in *DeleteProductCategoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProductCategoriesService_DeleteProductCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductCategoriesServiceServer is the server API for ProductCategoriesService service.
// All implementations must embed UnimplementedProductCategoriesServiceServer
// for forward compatibility
type ProductCategoriesServiceServer interface {
	GetProductCategories(context.Context, *emptypb.Empty) (*ProductCategory, error)
	CreateProductCategory(context.Context, *CreateProductCategoryRequest) (*ProductCategory, error)
	UpdateProductCategory(context.Context, *UpdateProductCategoryRequest) (*ProductCategory, error)
	DeleteProductCategory(context.Context, *DeleteProductCategoryRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedProductCategoriesServiceServer()
}

// UnimplementedProductCategoriesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductCategoriesServiceServer struct {
}

func (UnimplementedProductCategoriesServiceServer) GetProductCategories(context.Context, *emptypb.Empty) (*ProductCategory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductCategories not implemented")
}
func (UnimplementedProductCategoriesServiceServer) CreateProductCategory(context.Context, *CreateProductCategoryRequest) (*ProductCategory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProductCategory not implemented")
}
func (UnimplementedProductCategoriesServiceServer) UpdateProductCategory(context.Context, *UpdateProductCategoryRequest) (*ProductCategory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductCategory not implemented")
}
func (UnimplementedProductCategoriesServiceServer) DeleteProductCategory(context.Context, *DeleteProductCategoryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductCategory not implemented")
}
func (UnimplementedProductCategoriesServiceServer) mustEmbedUnimplementedProductCategoriesServiceServer() {
}

// UnsafeProductCategoriesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductCategoriesServiceServer will
// result in compilation errors.
type UnsafeProductCategoriesServiceServer interface {
	mustEmbedUnimplementedProductCategoriesServiceServer()
}

func RegisterProductCategoriesServiceServer(s grpc.ServiceRegistrar, srv ProductCategoriesServiceServer) {
	s.RegisterService(&ProductCategoriesService_ServiceDesc, srv)
}

func _ProductCategoriesService_GetProductCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCategoriesServiceServer).GetProductCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductCategoriesService_GetProductCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCategoriesServiceServer).GetProductCategories(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCategoriesService_CreateProductCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCategoriesServiceServer).CreateProductCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductCategoriesService_CreateProductCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCategoriesServiceServer).CreateProductCategory(ctx, req.(*CreateProductCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCategoriesService_UpdateProductCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCategoriesServiceServer).UpdateProductCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductCategoriesService_UpdateProductCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCategoriesServiceServer).UpdateProductCategory(ctx, req.(*UpdateProductCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCategoriesService_DeleteProductCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCategoriesServiceServer).DeleteProductCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductCategoriesService_DeleteProductCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCategoriesServiceServer).DeleteProductCategory(ctx, req.(*DeleteProductCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductCategoriesService_ServiceDesc is the grpc.ServiceDesc for ProductCategoriesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductCategoriesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product_categories.v1.ProductCategoriesService",
	HandlerType: (*ProductCategoriesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProductCategories",
			Handler:    _ProductCategoriesService_GetProductCategories_Handler,
		},
		{
			MethodName: "CreateProductCategory",
			Handler:    _ProductCategoriesService_CreateProductCategory_Handler,
		},
		{
			MethodName: "UpdateProductCategory",
			Handler:    _ProductCategoriesService_UpdateProductCategory_Handler,
		},
		{
			MethodName: "DeleteProductCategory",
			Handler:    _ProductCategoriesService_DeleteProductCategory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product-categories/v1/product_categories.proto",
}
