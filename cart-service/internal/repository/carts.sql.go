// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: carts.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addOrUpdateProductInCart = `-- name: AddOrUpdateProductInCart :one
INSERT INTO carts_products (cart_id, product_id, quantity, price)
VALUES ($1, $2, $3, $4)
ON CONFLICT (cart_id, product_id)
DO UPDATE SET
    quantity = $3,
    price = EXCLUDED.price
RETURNING id, cart_id, product_id, quantity, price, added_at
`

type AddOrUpdateProductInCartParams struct {
	CartID    pgtype.UUID    `json:"cartId"`
	ProductID pgtype.UUID    `json:"productId"`
	Quantity  int32          `json:"quantity"`
	Price     pgtype.Numeric `json:"price"`
}

func (q *Queries) AddOrUpdateProductInCart(ctx context.Context, arg AddOrUpdateProductInCartParams) (CartsProduct, error) {
	row := q.db.QueryRow(ctx, addOrUpdateProductInCart,
		arg.CartID,
		arg.ProductID,
		arg.Quantity,
		arg.Price,
	)
	var i CartsProduct
	err := row.Scan(
		&i.ID,
		&i.CartID,
		&i.ProductID,
		&i.Quantity,
		&i.Price,
		&i.AddedAt,
	)
	return i, err
}

const createCart = `-- name: CreateCart :one
INSERT INTO carts (user_id)
VALUES ($1)
RETURNING id, user_id, created_at
`

func (q *Queries) CreateCart(ctx context.Context, userID pgtype.UUID) (Cart, error) {
	row := q.db.QueryRow(ctx, createCart, userID)
	var i Cart
	err := row.Scan(&i.ID, &i.UserID, &i.CreatedAt)
	return i, err
}

const deleteCartByUserID = `-- name: DeleteCartByUserID :exec
DELETE FROM carts
WHERE user_id = $1
`

func (q *Queries) DeleteCartByUserID(ctx context.Context, userID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteCartByUserID, userID)
	return err
}

const getCartByUserID = `-- name: GetCartByUserID :one
SELECT id, user_id, created_at FROM carts
WHERE user_id = $1
`

func (q *Queries) GetCartByUserID(ctx context.Context, userID pgtype.UUID) (Cart, error) {
	row := q.db.QueryRow(ctx, getCartByUserID, userID)
	var i Cart
	err := row.Scan(&i.ID, &i.UserID, &i.CreatedAt)
	return i, err
}

const getCartProductsByCartID = `-- name: GetCartProductsByCartID :many
SELECT product_id, quantity
FROM carts_products
WHERE cart_id = $1
`

type GetCartProductsByCartIDRow struct {
	ProductID pgtype.UUID `json:"productId"`
	Quantity  int32       `json:"quantity"`
}

func (q *Queries) GetCartProductsByCartID(ctx context.Context, cartID pgtype.UUID) ([]GetCartProductsByCartIDRow, error) {
	rows, err := q.db.Query(ctx, getCartProductsByCartID, cartID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCartProductsByCartIDRow
	for rows.Next() {
		var i GetCartProductsByCartIDRow
		if err := rows.Scan(&i.ProductID, &i.Quantity); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeProductFromCart = `-- name: RemoveProductFromCart :exec
DELETE FROM carts_products
WHERE cart_id = (SELECT id FROM carts WHERE user_id = $1) AND product_id = $2
`

type RemoveProductFromCartParams struct {
	UserID    pgtype.UUID `json:"userId"`
	ProductID pgtype.UUID `json:"productId"`
}

func (q *Queries) RemoveProductFromCart(ctx context.Context, arg RemoveProductFromCartParams) error {
	_, err := q.db.Exec(ctx, removeProductFromCart, arg.UserID, arg.ProductID)
	return err
}
