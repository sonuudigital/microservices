// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: product_categories.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProductCategory = `-- name: CreateProductCategory :one
INSERT INTO product_categories (
  name,
  description
) VALUES (
  $1, $2
)
RETURNING id, name, description, created_at, updated_at
`

type CreateProductCategoryParams struct {
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) CreateProductCategory(ctx context.Context, arg CreateProductCategoryParams) (ProductCategory, error) {
	row := q.db.QueryRow(ctx, createProductCategory, arg.Name, arg.Description)
	var i ProductCategory
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProductCategory = `-- name: DeleteProductCategory :exec
DELETE FROM product_categories
WHERE id = $1
`

func (q *Queries) DeleteProductCategory(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteProductCategory, id)
	return err
}

const getProductCategories = `-- name: GetProductCategories :many
SELECT id, name, description, created_at, updated_at FROM product_categories
ORDER BY name
`

func (q *Queries) GetProductCategories(ctx context.Context) ([]ProductCategory, error) {
	rows, err := q.db.Query(ctx, getProductCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProductCategory
	for rows.Next() {
		var i ProductCategory
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProductCategory = `-- name: UpdateProductCategory :exec
UPDATE product_categories
SET
  name = $2,
  description = $3,
  updated_at = NOW()
WHERE id = $1
`

type UpdateProductCategoryParams struct {
	ID          pgtype.UUID `json:"id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) UpdateProductCategory(ctx context.Context, arg UpdateProductCategoryParams) error {
	_, err := q.db.Exec(ctx, updateProductCategory, arg.ID, arg.Name, arg.Description)
	return err
}
