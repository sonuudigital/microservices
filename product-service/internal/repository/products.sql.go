// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: products.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (
  name,
  description,
  price,
  code,
  stock_quantity
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, name, description, code, price, created_at, stock_quantity, updated_at
`

type CreateProductParams struct {
	Name          string         `json:"name"`
	Description   pgtype.Text    `json:"description"`
	Price         pgtype.Numeric `json:"price"`
	Code          string         `json:"code"`
	StockQuantity int32          `json:"stockQuantity"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, createProduct,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.Code,
		arg.StockQuantity,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Code,
		&i.Price,
		&i.CreatedAt,
		&i.StockQuantity,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products
WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteProduct, id)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT id, name, description, code, price, created_at, stock_quantity, updated_at FROM products
WHERE id = $1
`

func (q *Queries) GetProduct(ctx context.Context, id pgtype.UUID) (Product, error) {
	row := q.db.QueryRow(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Code,
		&i.Price,
		&i.CreatedAt,
		&i.StockQuantity,
		&i.UpdatedAt,
	)
	return i, err
}

const getProductsByIDs = `-- name: GetProductsByIDs :many
SELECT id, name, description, code, price, created_at, stock_quantity, updated_at FROM products
WHERE id = ANY($1::uuid[])
`

func (q *Queries) GetProductsByIDs(ctx context.Context, productIds []pgtype.UUID) ([]Product, error) {
	rows, err := q.db.Query(ctx, getProductsByIDs, productIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Code,
			&i.Price,
			&i.CreatedAt,
			&i.StockQuantity,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductsPaginated = `-- name: ListProductsPaginated :many
SELECT id, name, description, code, price, created_at, stock_quantity, updated_at FROM products
ORDER BY name
LIMIT $1
OFFSET $2
`

type ListProductsPaginatedParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListProductsPaginated(ctx context.Context, arg ListProductsPaginatedParams) ([]Product, error) {
	rows, err := q.db.Query(ctx, listProductsPaginated, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Code,
			&i.Price,
			&i.CreatedAt,
			&i.StockQuantity,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products
SET
  name = $2,
  description = $3,
  price = $4,
  code = $5,
  stock_quantity = $6,
  updated_at = NOW()
WHERE id = $1
RETURNING id, name, description, code, price, created_at, stock_quantity, updated_at
`

type UpdateProductParams struct {
	ID            pgtype.UUID    `json:"id"`
	Name          string         `json:"name"`
	Description   pgtype.Text    `json:"description"`
	Price         pgtype.Numeric `json:"price"`
	Code          string         `json:"code"`
	StockQuantity int32          `json:"stockQuantity"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, updateProduct,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.Code,
		arg.StockQuantity,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Code,
		&i.Price,
		&i.CreatedAt,
		&i.StockQuantity,
		&i.UpdatedAt,
	)
	return i, err
}
