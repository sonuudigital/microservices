services:
  api-gateway:
    container_name: api-gateway
    hostname: api-gateway
    build:
      context: .
      dockerfile: api-gateway/Dockerfile
    ports:
      - "${API_GATEWAY_PORT}:8080"
    volumes:
      - ./certs:/certs:ro
    user: "${UID}:${GID}"
    environment:
      PORT: ${API_GATEWAY_PORT}
      USER_SERVICE_URL: ${USER_SERVICE_URL}
      PRODUCT_SERVICE_URL: ${PRODUCT_SERVICE_URL}
      LOG_LEVEL: ${LOG_LEVEL}
      JWT_PRIVATE_KEY_PATH: /certs/private.pem
      JWT_PUBLIC_KEY_PATH: /certs/public.pem
      JWT_ISSUER: ${JWT_ISSUER}
      JWT_AUDIENCE: ${JWT_AUDIENCE}
      JWT_TTL_MINUTES: ${JWT_TTL_MINUTES}
    depends_on:
      - user-service
    networks:
      - ecommerce-network

  user-service:
    container_name: user-service
    hostname: user-service
    build:
      context: .
      dockerfile: user-service/Dockerfile
    environment:
      PORT: ${USER_SERVICE_PORT}
      DATABASE_URL: postgres://${USER_POSTGRES_USER}:${USER_POSTGRES_PASSWORD}@user-db:5432/${USER_POSTGRES_DB}?sslmode=disable
      MIGRATIONS_DIR: /migrations
    depends_on:
      user-db:
        condition: service_healthy
    networks:
      - ecommerce-network

  product-service:
    container_name: product-service
    hostname: product-service
    build:
      context: .
      dockerfile: product-service/Dockerfile
    environment:
      PORT: ${PRODUCT_SERVICE_PORT}
      DATABASE_URL: postgres://${PRODUCT_POSTGRES_USER}:${PRODUCT_POSTGRES_PASSWORD}@product-db:5432/${PRODUCT_POSTGRES_DB}?sslmode=disable
      MIGRATIONS_DIR: /migrations
    depends_on:
      product-db:
        condition: service_healthy
    networks:
      - ecommerce-network

  cart-service:
    container_name: cart-service
    hostname: cart-service
    build:
      context: .
      dockerfile: cart-service/Dockerfile
    environment:
      PORT: ${CART_SERVICE_PORT}
      DATABASE_URL: postgres://${CART_POSTGRES_USER}:${CART_POSTGRES_PASSWORD}@cart-db:5432/${CART_POSTGRES_DB}?sslmode=disable
      MIGRATIONS_DIR: /migrations
    depends_on:
      cart-db:
        condition: service_healthy
    networks:
      - ecommerce-network

  user-db:
    image: postgres:18-alpine
    container_name: user-db
    hostname: user-db
    environment:
      POSTGRES_DB: ${USER_POSTGRES_DB}
      POSTGRES_USER: ${USER_POSTGRES_USER}
      POSTGRES_PASSWORD: ${USER_POSTGRES_PASSWORD}
    ports:
      - "${USER_DATABASE_PORT}:5432"
    volumes:
      - user_db_data:/var/lib/postgresql/data
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${USER_POSTGRES_USER} -d ${USER_POSTGRES_DB}"]
      interval: 5s
      timeout: 3s
      retries: 10

  product-db:
    image: postgres:18-alpine
    container_name: product-db
    hostname: product-db
    environment:
      POSTGRES_DB: ${PRODUCT_POSTGRES_DB}
      POSTGRES_USER: ${PRODUCT_POSTGRES_USER}
      POSTGRES_PASSWORD: ${PRODUCT_POSTGRES_PASSWORD}
    ports:
      - "${PRODUCT_DATABASE_PORT}:5432"
    volumes:
      - product_db_data:/var/lib/postgresql/data
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PRODUCT_POSTGRES_USER} -d ${PRODUCT_POSTGRES_DB}"]
      interval: 5s
      timeout: 3s
      retries: 10

  cart-db:
    image: postgres:18-alpine
    container_name: cart-db
    hostname: cart-db
    environment:
      POSTGRES_DB: ${CART_POSTGRES_DB}
      POSTGRES_USER: ${CART_POSTGRES_USER}
      POSTGRES_PASSWORD: ${CART_POSTGRES_PASSWORD}
    ports:
      - "${CART_DATABASE_PORT}:5432"
    volumes:
      - cart_db_data:/var/lib/postgresql/data
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${CART_POSTGRES_USER} -d ${CART_POSTGRES_DB}"]
      interval: 5s
      timeout: 3s
      retries: 10

  pgadmin:
    image: dpage/pgadmin4:9.8.0
    hostname: pgadmin
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "${PGADMIN_PORT}:80"
    depends_on:
      user-db:
        condition: service_healthy
      product-db:
        condition: service_healthy
    networks:
      - ecommerce-network
    volumes:
      - pgadmin_data:/var/lib/pgadmin

networks:
  ecommerce-network:
    driver: bridge

volumes:
  user_db_data:
  product_db_data:
  cart_db_data:
  pgadmin_data:
